* vim for java IDE 
_<2021-05-03 一>_


[[https://sm.ms/delete/e6NLBb1KCpuVxQG4DX3yrlgSkt]]

** keymap
#+begin_src cpp
如果你是新手,不习惯默认的按键可以尝试这个
"map a h
"map s j
"map d l
"map w k
#+end_src
** Plug-in
*** [[https://github.com/junegunn/vim-plug][junegunn/vim-plug]]
+ 安装
  #+begin_src sh
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  #+end_src
*** [[https://github.com/puremourning/vimspector][puremourning/vimspector]]
+ 安装
  #+begin_src shell
    Plug 'puremourning/vimspector',{ 'do': 'python3 install_gadget.py --all'}
  #+end_src
 
*** [[https://github.com/neoclide/coc.nvim][neoclide/coc.nvim]]
+ 安装
  #+begin_src shell
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile','branch': 'master'}
  #+end_src

*** [[https://github.com/thinca/vim-quickrun][thinca/vim-quickrun]]
+ 安装
#+begin_src shell
Plug 'thinca/vim-quickrun'
#+end_src
*** [[https://github.com/skywind3000/asyncrun.vim][skywind3000/asyncrun.vim]]
+ 安装
  #+begin_src sh
Plug 'skywind3000/asyncrun.vim'
  #+end_src
*** [[https://github.com/preservim/nerdtree][preservim/nerdtree]]
+ 安装 #+begin_src shell Plug 'preservim/nerdtree' Plug 'ryanoasis/vim-devicons' #+end_src
** Configuration tutorial
*** nerdtree configuration
+ 基础配置
#+begin_src sh

autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif
let g:NERDTreeDirArrowExpandable = '◉'
let g:NERDTreeDirArrowCollapsible = '○'
let NERDTreeShowHidden=1
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹ ',
                \ 'Staged'    :'✚ ',
                \ 'Untracked' :'✭ ',
                \ 'Renamed'   :'➜ ',
                \ 'Unmerged'  :'═ ',
                \ 'Deleted'   :'✖ ',
                \ 'Dirty'     :'✗ ',
                \ 'Ignored'   :'☒ ',
                \ 'Clean'     :'✔︎ ',
                \ 'Unknown'   :'?',
                \ }

#+end_src
*** coc-nvim configuration
+ 插件列表
    #+begin_src sh

    let         g:coc_global_extensions = [
                \'coc-json',
                \'coc-pairs',
                \'coc-git',
                \'coc-tabnine',
                \'coc-pyright',
                \'coc-picgo',
                \'coc-vimlsp',
                \'coc-snippets',
                \'coc-marketplace',
                \'coc-clangd',
                \'coc-go',
                \'coc-sh']

    #+end_src
+ 插件配置
  #+begin_src cpp
set hidden
set shortmess+=c

if has("patch-8.1.1564")
  " 最近vim可以将signcolumn和number列合并为一个
  set signcolumn=number
else
  set signcolumn=yes
endif

set updatetime=100

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"



function!       s:check_back_space() abort
	let         col = col('.') - 1
	return      !col || getline('.')[col - 1]  =~# '\s'
endfunction


inoremap        <silent><expr> <c-space> coc#refresh()
if              has('patch8.1.1068')
	inoremap    <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
	imap        <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

nmap            <silent> gs <Plug>(coc-definition)
nmap            <silent> gr <Plug>(coc-references)
nmap 			<silent> <leader>rn <Plug>(coc-rename)


nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
"autocmd光标保持*静默调用coc操作async（'highlight'）
"nmap            <leader>f <Plug>(coc-rename) "快速重命名函数
augroup         mygroup
augroup         end
" Example: `<leader>aap` for current paragraph
xmap            if <Plug>(coc-funcobj-i)
xmap            af <Plug>(coc-funcobj-a)
omap            if <Plug>(coc-funcobj-i)
omap            af <Plug>(coc-funcobj-a)
nmap            <silent> <TAB> <Plug>(coc-range-select)
xmap            <silent> <TAB> <Plug>(coc-range-select)
command!        -nargs=0 Format :call CocAction('format')
command!        -nargs=? Fold :call     CocAction('fold', <f-args>)
command!        -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
set             statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
nnoremap        <silent> <space>a  :<C-u>CocList<cr>
nnoremap        <silent> <space>e  :<C-u>CocList extensions<cr>
nnoremap        <silent> <space>c  :<C-u>CocList commands<cr>
nnoremap        <silent> <space>o  :<C-u>CocList outline<cr>
nnoremap        <silent> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap        <silent> <space>j  :<C-u>CocNext<CR>
nnoremap        <silent> <space>k  :<C-u>CocPrev<CR>
nnoremap        <silent> <space>p  :<C-u>CocListResume<CR>

" 使用 `;g` 和 `;g` 瀏覽診斷
nmap <silent> <leader>d <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>g <Plug>(coc-diagnostic-next)





"=== coc 打开大文件自动禁用
let g:trigger_size = 0.5 * 1048576

augroup hugefile
  autocmd!
  autocmd BufReadPre *
        \ let size = getfsize(expand('<afile>')) |
        \ if (size > g:trigger_size) || (size == -2) |
        \   echohl WarningMsg | echomsg 'WARNING: altering options for this huge file!' | echohl None |
        \   exec 'CocDisable' |
        \ else |
        \   exec 'CocEnable' |
        \ endif |
        \ unlet size
augroup END

function! LoadJavaContent(uri)
    setfiletype java
    let content = CocRequest('java', 'java/classFileContents', {'uri': 'jdt:/' . a:uri})
    call setline(1, split(content, "\n"))
    setl nomod
    setl readonly
endfunction

autocmd! BufReadPre,BufReadCmd,FileReadCmd,SourceCmd *.class call LoadJavaContent(expand("<amatch>"))<CR>

  #+end_src
+ snippet 代码片段
  + 安装
    :CocInstall coc-snippets
  + 配置
    #+begin_src cpp
" 使用<c-l>进行触发代码段扩展。
imap <C-j> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" 使用<c-j>跳转到下一个占位符，默认为coc.nvim
let g:coc_snippet_next = '<c-j>'

" 使用<c-k>跳转到上一个占位符，默认为coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" 使用<leader> x将可视的选定代码转换为代码段
xmap <leader>x  <Plug>(coc-convert-snippet)

inoremap <silent><expr> <C-l>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
let g:coc_snippet_next = '<C-k>'

  #+end_src
+ coc-tabnine 全语言自动完成工具
    #+begin_src sh
:CocInstall coc-tabnine
#+end_src
*** vimspector configuration
+ 基础配置
#+begin_src sh
let g:vimspector_enable_mappings = 'HUMAN'
function! s:read_template_into_buffer(template)
    " has to be a function to avoid the extra space fzf#run insers otherwise"
    execute '0r ~/.config/nvim/vimspector-json/'.a:template
endfunction
command! -bang -nargs=* LoadVimSpectorJsonTemplate call fzf#run({
            \   'source': 'ls -1 ~/.config/nvim/vimspector-json',
            \   'down': 20,
            \   'sink': function('<sid>read_template_into_buffer')
            \ })
nnoremap <LEADER>vs :tabe .vimspector.json<CR>:LoadVimSpectorJsonTemplate<CR>
nnoremap <F1> :call vimspector#StepInto()<CR>
nnoremap <F7> :call vimspector#Reset()<CR>

let g:vimspector_bottombar_height=6
let g:vimspector_sidebar_width=50
let g:vimspector_code_minwidth = 77
let g:vimspector_terminal_maxwidth = 75
let g:vimspector_terminal_minwidth = 20

let g:vimspector_install_gadgets = [
			\'debugpy',
			\'vscode-cpptools',
			\'CodeLLDB',
			\'vscode-bash-debug',
			\'vscode-go']

#+end_src
+ 实例配置
    + java json
        #+begin_src json
    {
    "adapters": {
        "java-debug-server": {
        "name": "vscode-java",
        "port": "${AdapterPort}"
        }
    },
    "configurations": {
        "Java Attach": {
        "default": true,
        "adapter": "java-debug-server",
        "configuration": {
            "request": "attach",
            "host": "127.0.0.1",
            "port": "5005"
        },
        "breakpoints": {
            "exception": {
            "caught": "N",
            "uncaught": "N"
            }
        }
        }
    }
    }

        #+end_src
    + cpp json
    #+begin_src json

    {
        "configurations": {
            "cpp:launch": {
                "adapter": "vscode-cpptools",
                "configuration": {
                    "name": "cpp",
                    "type": "cppdbg",
                    "request": "launch",
                    "program": "${fileDirname}/${fileBasenameNoExtension}",
                    "args": [],
                    "cwd": "${workspaceRoot}",
                    "environment": [],
                    "externalConsole": true ,
                    "stopAtEntry": false ,
                    "MIMode": "gdb",
                    "logging": {
                        "engineLogging": false
                    }
                }
            }
        }
    }

    #+end_src
    + go json
        #+begin_src json

    {
    "configurations": {
        "run": {
        "adapter": "vscode-go",
        "configuration": {
            "request": "launch",
            "program": "${fileDirname}",
            "mode": "debug",
            "dlvToolPath": "$HOME/go/bin/dlv"
        }
        }
    }
    }
        #+end_src
    + python json
    #+begin_src 

    {
        "configurations": {
            "run - debugpy": {
                "adapter": "debugpy",
                "configuration": {
                    "request": "launch",
                    "type": "python",
                    "cwd": "${workspaceRoot}",
                    "program": "${file}",
                    "stopOnEntry": false ,
                    "console": "integratedTerminal"
                },
                "breakpoints": {
                    "exception": {
                        "raised": "N",
                        "uncaught": "",
                        "userUnhandled": ""
                    }
                }
            }
        }
    }
    #+end_src
*** asyncrun configuration
+ 基础配置
  #+begin_src cpp

""快速运行
noremap <silent><space>r :AsyncTask file-run<cr>
noremap <silent><space>d :AsyncTask file-build<cr>
let g:asyncrun_open = 10
let g:asynctasks_config_name = ['.tasks', '.git/tasks.ini', '.svn/tasks.ini']
let g:asynctasks_term_pos = 'tab'
let g:asynctasks_term_rows = 10    " 设置纵向切割时，高度为 10
let g:asynctasks_term_rows = 10    " 设置水平端子拆分的高度
let g:asynctasks_term_cols = 30    " 设置垂直端子分割的宽度

"    $VIM_FILEPATH  - 当前 buffer 的文件名全路径
"    $VIM_FILENAME  - 当前 buffer 的文件名（没有前面的路径）
"    $VIM_FILEDIR   - 当前 buffer 的文件所在路径
"    $VIM_FILEEXT   - 当前 buffer 的扩展名
"    $VIM_FILENOEXT - 当前 buffer 的主文件名（没有前面路径和后面扩展名）
"    $VIM_PATHNOEXT - 带路径的主文件名（$VIM_FILEPATH 去掉扩展名）
"    $VIM_CWD       - 当前 Vim 目录
"    $VIM_RELDIR    - 相对于当前路径的文件名
"    $VIM_RELNAME   - 相对于当前路径的文件路径
"    $VIM_ROOT      - 当前 buffer 的项目根目录
"    $VIM_CWORD     - 光标下的单词
"    $VIM_CFILE     - 光标下的文件名
"    $VIM_GUI       - 是否在 GUI 下面运行？
"    $VIM_VERSION   - Vim 版本号
"    $VIM_COLUMNS   - 当前屏幕宽度
"    $VIM_LINES     - 当前屏幕高度
"    $VIM_SVRNAME   - v:servername 的值

  #+end_src
+ 配置示例
  #+begin_src sh

# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=g++ "$(VIM_FILEPATH)"  -g -o  "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=terminal

# this is for output=quickfix only
# 如果省略，将使用vim当前的错误格式。
errorformat=%f:%l:%m

# save file before execute
[file-run]
output=terminal
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
  #+end_src
** Other
+ voldikss/vim-translator 
  + 快捷键绑定
        #+begin_src cpp
nmap <silent> <leader>e <Plug>Translate
vmap <silent> <leader>e <Plug>TranslateV
" 在窗口中显示翻译
nmap <silent> <leader>t <Plug>TranslateW
vmap <silent> <leader>t <Plug>TranslateWV
" 用翻译替换文本
nmap <silent> <Leader>r <Plug>TranslateR
vmap <silent> <Leader>r <Plug>TranslateRV

" 翻译剪贴板中的文本
nmap <silent> <Leader>x <Plug>TranslateX
 ""翻页
nnoremap <silent><expr> <M-f> translator#window#float#has_scroll() ?
                            \ translator#window#float#scroll(1) : "\<M-f>"
nnoremap <silent><expr> <M-b> translator#window#float#has_scroll() ?
                            \ translator#window#float#scroll(0) : "\<M-f>"

        #+end_src




