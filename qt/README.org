* Qt
** 创建窗口
在qt中新建项目选择新建一个类,选择基类
类中的信号

Q_OBJECT 信号槽
signals: 信号
*** 示例代码
**** mainWidget.h
#+begin_src c++
#ifndef MYWIDGET_H
#define MYWIDGET_H

#include <QWidget>
#include <QPushButton>
#include <QDebug>
#include "subwidget.h"

class MyWidget : public QWidget
{
    Q_OBJECT // 信号槽

public:
    MyWidget(QWidget *parent = nullptr);
    void sold();
    void NewWin();
    void soldWin();
    void soldWinC(int ,QString);
    ~MyWidget();
private:
    QPushButton *p1;
    QPushButton p2;
    QPushButton p3;
    SubWidget subWin;

};
#endif // MYWIDGET_H

#+end_src
**** main.cpp
#+begin_src c++
#include "mywidget.h"

#include <QApplication>

int main(int argc, char *argv[])
{
    // 应用程序只有一个应用程序类的对象
    QApplication a(argc, argv);
    // MyWidget 继承与Qwidget , Qwidget 是一个窗口基类
    // 所以Mywidget 也是窗口类
    MyWidget w;

    w.show();
    return a.exec(); // exec 让程序一直执行
}

#+end_src
**** mainWidget.cpp
#+begin_src c++
#include "mywidget.h"

MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
{
    p2.setParent(this);
    p2.setText("hello wrold");
    p2.move(100,120);
    resize(400,300);

    /*  p1 信号发出者
     *  &QabstractButton::pressed 处理信号
     *  this 信号接受者
     *  MyWidget::close 槽函数,信号处理函数 &接受类名::槽函数名字
     */

    p1 = new QPushButton (this);
    p1->setText("关闭");
    p1->move(100,150);
    connect(p1,&QAbstractButton::pressed,this,&MyWidget::close);

    /*
     * 自定义槽函数
     */
    connect(&p2,&QAbstractButton::pressed,this,&MyWidget::sold);
    connect(&p2,&QAbstractButton::released,p1,&MyWidget::hide);

    p3.setText("切换到子窗口");
    p3.setParent(this);
    connect(&p3,&QAbstractButton::pressed,this,&MyWidget::NewWin);

    // 接受子窗口信号
    void (SubWidget::*fun )(int,QString) = &SubWidget::MySignals;  // 有参信号
    void (SubWidget::*funs )() = &SubWidget::MySignals;            // 无参信号

    connect(&subWin,funs,this,&MyWidget::soldWin);
    connect(&subWin,fun,this,&MyWidget::soldWinC);

}
void MyWidget::soldWinC(int a, QString b) {
   qDebug() << a << b.toUtf8().data() ; // toUtf8 -> 转换数组(QbyteArray) --> data --> 转换字符串(char*)
}

void MyWidget::sold() {
    p2.setText("懂我");
}
void MyWidget::NewWin() {
    this->hide();
    subWin.show();
}
void MyWidget::soldWin() {
    subWin.hide();
    show();
}
MyWidget::~MyWidget()
{
}


#+end_src
**** subWindget.h
#+begin_src c++
#ifndef SUBWIDGET_H
#define SUBWIDGET_H

#include <QWidget>
#include <QPushButton>

class SubWidget : public QWidget
{
    Q_OBJECT
public:
    explicit SubWidget(QWidget *parent = nullptr);
    void hideThis();
private:
    QPushButton p;
signals:
    /*
     * 信号
     * 信号必须由关键字signals来声明
     * 信号没有返回值
     * 信号就是函数声明,无需定义
     * 信号可以重载
     * 有参信号
     */
    void MySignals();
    void MySignals(int,QString);

};

#endif // SUBWIDGET_H

#+end_src
**** suWindget.cpp
#+begin_src c++
#include "subwidget.h"
#include <QPushButton>

SubWidget::SubWidget(QWidget *parent) : QWidget(parent)
{
    setWindowTitle("子窗口");
    p.setText("切换主窗口");
    p.setParent(this);
    connect(&p,&QPushButton::clicked,this,&SubWidget::hideThis);
    resize(400,300);
    /*                                                   |
     *                                                 信号发送函数
     */
}

void SubWidget::hideThis() {
    emit MySignals();  // 信号
    emit MySignals(250,"I'm  is son win"); // 有参信号
}

#+end_src
*** 窗口基类
| 类      | 描述                                                     |
| Qwiget  | 类是所有用户界面对象的基类                               |
| MainWin | 类提供一个带有菜单条，工具条和一个状态条的主应用程序窗口 |
| QDialog | 类是对话框窗口的基类                                     |
** 使用C++ 11 特性
在工程文件pro中添加下面的内容
#+begin_src 
CONFIG += c++11
#+end_src

*** Lambda 表达式
*lambda表达式是C++11中引入的一项新技术，利用lambda表达式可以编写内嵌的匿名函数，用以替换独立函数或者函数对象，并且使代码更可读。但是从本质上来讲，lambda表达式只是一种语法糖，因为所有其能完成的工作都可以用其它稍微复杂的代码来实现。但是它简便的语法却给C++带来了深远的影响。如果从广义上说，lamdba表达式产生的是函数对象。在类中，可以重载函数调用运算符()，此时类的对象可以将具有类似函数的行为，我们称这些对象为函数对象（Function Object）或者仿函数（Functor）。相比lambda表达式，函数对象有自己独特的优势。下面我们开始具体讲解这两项黑科技。*

*无参匿名*
#+begin_src cpp
// 定义简单的lambda表达式
auto basicLambda = [] { std::cout << "Hello, world!" << std::endl; };
// 调用
basicLambda();   // 输出：Hello, world!
#+end_src

#+RESULTS:

*有参匿名*
#+begin_src cpp
// 指明返回类型
int main() {

auto add = [](int a, int b) -> int { return a + b; };
// 自动推断返回类型
auto multiply = [](int a, int b) { return a * b; };

int sum = add(2, 5);   // 输出：7
int product = multiply(2, 5);  // 输出：10
printf("%d",sum);
}
#+end_src

#+RESULTS:

*使用外部变量*
#+begin_src c++
int main()
{
    int x = 10;
    
    auto add_x = [x](int a) { return a + x; };  // 复制捕捉x
    auto multiply_x = [&x](int a) { return a * x; };  // 引用捕捉x
    
    cout << add_x(10) << " " << multiply_x(10) << endl;
    // 输出：20 100
    return 0;
}
#+end_src
+ []：默认不捕获任何变量；
+ [=]：默认以值捕获所有变量；
+ [&]：默认以引用捕获所有变量；
+ [x]：仅以值捕获x，其它变量不捕获；
+ [&x]：仅以引用捕获x，其它变量不捕获；
+ [=, &x]：默认以值捕获所有变量，但是x是例外，通过引用捕获；
+ [&, x]：默认以引用捕获所有变量，但是x是例外，通过值捕获；
+ [this]：通过引用捕获当前对象（其实是复制指针）；
+ [*this]：通过传值方式捕获当前对象；
  
** 创建菜单栏
*** Qmenubar
#+begin_src cpp
Qmenubar *mBar = menubar();
#+end_src
** 对话框
*** 模态对话框
+ 模态对话框
*** 非模态对话框
** 常用的部件
*** LineEdit
*输入一行字符*
**** 常用接口
#+begin_src cpp
ui->lineEdit->setEchoMode(QLineEdit::Password); // 设置text显示方式,如果设置成 *password* 则显示 "*"
#+end_src
*** TextLaber
*用户显示文字的标签*
**** 常用接口
字符标签可以显示 *字符* *html* *图片* *gif*
#+begin_src  cpp
//  显示 html
label = new QLabel();
label->setParent(this);
label->setText("<h1><a href=\"https://www.baidu.com\">百度</a></h1>");
label->setOpenExternalLinks(true); // 设置运行外部打开链接
label->show();   // 显示标签
// 显示图片
// 需要引入 QPixmap 库

ui->laberimager->setPixmap(QPixmap("://Imager/1.png"));
ui->laberimager->setScaledContents(true);

#+end_src

#+RESULTS:
** qt 样式表
*** 使用 setStyleSheet 设置样式
#+begin_src cpp

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->label->setPixmap(QPixmap(":/img/logo.png"));
    ui->widget_2->setStyleSheet("QWidget{color:#FF0080;"
                                "}");  // 语法与 css 几乎一样
}

#+end_src
**** 选择器
| 选择器     | 举例                      | 解析                                                                                                                                                                  |
| 通用选择器 | *                         | 所有 Qt 的 widget，即不声明选择器时，属性作用于所有组建                                                                                                               |
| 类型选择器 | QPushButton               | 作用于QPushButton及其子类的实例。                                                                                                                                     |
| 属性选择器 | QPushButton[flat=“false”] | 作用于非平面（flat=“false”）的QPushButton实例。                                                                                                                       |
| 类选择器   | .QPushButton              | 作用于QPushButton的实例，但不匹配其子类的实例。（加了个’.’)                                                                                                           |
| ID选择器   | QPushButton#okButton      | 作用于对象名称为okButton的所有QPushButton实例。                                                                                                                       |
| 后代选择器 | QDialog QPushButton       | 匹配作为QDialog的子体(子级、孙级等)的所有QPushButton实例。                                                                                                            |
| 子选择器   | QDialog > QPushButton     | 匹配作为QDialog的直接子级的所有QPushButton实例。                                                                                                                      |
| 子控制     | QComboBox::drop-down      | 要设置复杂 widget 的样式，需要访问 widget 的子控件，如QComboBox的下拉按钮或QSpinBox的上下箭头。选择器可以包含子控件，从而可以将规则的应用限制到特定的 widget 子控件。 |
*** 伪状态
#+begin_src cpp
ui->pushButton->setStyleSheet("QPushButton:hover {border-image:url(:/img/20200908081128597.jpg);}");  // hover 设置 当鼠标悬停时的动作
#+end_src
**** 状态
|--------------------+--------------------------------------------------------------------------------------------------------------|
| Pseudo-State       | Description                                                                                                  |
| :active            | 此状态在widget驻留在活动窗口中时设置。                                                                       |
| adjoins-item       | 此状态在QTreeView的::branch与项相邻时设置。                                                                  |
| :alternate         | 当QAbstractItemView::ternatingRowColors()设置为true时，将为绘制QAbstractItemView的行时的每隔一行设置此状态。 |
| :bottom            | 该项目位于底部。例如，标签位于底部的QTabBar。                                                                |
| :checked           | 该项目已选中。例如，QAbstractButton的选中状态。                                                              |
| :closable          | 这些项目可以关闭。例如，QDockWidget打开了QDockWidget::DockWidgetClosable功能。                               |
| :default           | 该项目为默认值。例如，QMenu中的默认QPushButton或默认操作。                                                   |
| :disabled          | 该项目已禁用。                                                                                               |
| :editable          | QComboBox是可编辑的。                                                                                        |
| :edit-focus        | 该项具有编辑焦点(请参见QStyle::State_HasEditFocus)。此状态仅适用于Qt扩展应用程序。                           |
| :enabled           | 该项目已启用。                                                                                               |
| :exclusive         | 该项目是独占项目组的一部分。例如，独占QActionGroup中的菜单项。                                               |
| :first             | 该项目是(列表中的)第一个项目。例如，QTabBar中的第一个选项卡。                                                |
| :flat              | 这件物品是平的。例如，平面QPushButton。                                                                      |
| :floatable         | 这些项目可以浮动。例如，QDockWidget打开了QDockWidget：：DockWidgetFloatable功能。                            |
| :focus             | 该项具有输入焦点。                                                                                           |
| :has-children      | 该项目具有子项。例如，QTreeView中具有子项的项。                                                              |
| :has-siblings      | 该项目有同级。例如，QTreeView中的同级项。                                                                    |
| :horizontal        | 该项目具有水平方向                                                                                           |
| :hover             | 鼠标悬停在该项目上。                                                                                         |
| :indeterminate     | 该项具有不确定状态。例如，部分选中QCheckBox或QRadioButton。                                                  |
| :last              | 该项是(列表中的)最后一项。例如，QTabBar中的最后一个选项卡。                                                  |
| :left              | 该项目位于左侧。例如，选项卡位于左侧的QTabBar。                                                              |
| :maximized         | 该项目将最大化。例如，最大化的QMdiSubWindow。                                                                |
| :middle            | 项目在中间(在列表中)。例如，QTabBar中不在开头或结尾的制表符。                                                |
| :minimized         | 该项目被最小化。例如，最小化的QMdiSubWindow。                                                                |
| :movable           | 物品可以四处移动。例如，QDockWidget打开了QDockWidget::DockWidgetMoovable功能。                               |
| :no-frame          | 该项目没有框架。例如，无框架的QSpinBox或QLineEdit。                                                          |
| :non-exclusive     | 该项是非独占项组的一部分。例如，非独占QActionGroup中的菜单项。                                               |
| :off               | 对于可以切换的项目，这适用于处于“关闭”状态的项目。                                                           |
| :on                | 对于可以切换的项目，这适用于处于“打开”状态的widget。                                                         |
| :only-one          | 该项目是(列表中的)唯一项目。例如，QTabBar中的一个单独的选项卡。                                              |
| :open              | 该项目处于打开状态。例如，QTreeView中的展开项，或具有打开菜单的QComboBox或QPushButton。                      |
| :next-selected     | 选择下一项(在列表中)。例如，QTabBar的选定选项卡紧挨着该项。                                                  |
| :pressed           | 正在使用鼠标按下该项。                                                                                       |
| :previous-selected | 选择上一项(在列表中)。例如，QTabBar中选定选项卡旁边的选项卡。                                                |
| :read-only         | 该项目标记为只读或不可编辑。例如，只读QLineEdit或不可编辑的QComboBox。                                       |
| :right             | 该项目位于右侧。例如，选项卡位于右侧的QTabBar。                                                              |
| :selected          | 该项目即被选中。例如，QTabBar中的选定选项卡或QMenu中的选定项目。                                             |
| :top               | 该项目位于顶部。例如，选项卡位于顶部的QTabBar。                                                              |
| :unchecked         | 该项目处于取消选中状态。                                                                                     |
| :vertical          | 该项目具有垂直方向。                                                                                         |
| :window            | widget是窗口(即顶层小部件)                                                                                   |
** qt 事件
*** 常用事件
|-----------------+-------------------------------+--------------------------------------------------------------------------------|
| 事件            | 描述                          | 接口                                                                           |
| 键盘事件:       | 按键按下和松开                | void 类::keyPressEvent(QKeyEvent *event) / keyReleaseEvent(QKeyEvent *event)   |
| 鼠标事件:       | 鼠标移动,鼠标按键的按下和松开 | void 类::mousePressEvent(QMouseEvent *ev) / mouseReleaseEvent(QMouseEvent *ev) |
| 拖放事件:       | 用鼠标进行拖放                |                                                                                |
| 滚轮事件:       | 鼠标滚轮滚动                  |                                                                                |
| 绘屏事件:       | 重绘屏幕的某些部分            |                                                                                |
| 定时事件:       | 定时器到时                    | void 类:: timerEvent(QTimerEvent *event)                                       |
| 焦点事件:       | 键盘焦点移动                  |                                                                                |
| 进入和离开事件: | 鼠标移入widget之内,或是移出   | void 类::enterEvent(QEvent *event) / leaveEvent(QEvent *event)                 |
| 移动事件:       | widget的位置改变              | void 类::mouseMoveEvent(QMouseEvent *ev)                                       |
| 大小改变事件:   | widget的大小改变              |                                                                                |
| 显示和隐藏事件: | widget显示和隐藏              |                                                                                |
| 窗口事件:       | 窗口是否为当前窗口            |                                                                                |
|-----------------+-------------------------------+--------------------------------------------------------------------------------|
